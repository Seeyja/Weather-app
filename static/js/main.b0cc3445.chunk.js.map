{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","className","type","value","onChange","change","placeholder","Result","weather","date","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","length","App","state","handleInputChange","e","setState","target","prevProps","prevState","this","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.b0cc3445.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.scss';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <form className=\"search-city\">\r\n            <input className=\"search-city__input\"\r\n                type=\"text\"\r\n                value={props.value}\r\n                onChange={props.change}\r\n                placeholder=\"Wpisz miasto\"\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n\r\n\r\n","import React from 'react';\r\nimport './Result.scss'\r\n\r\nconst Result = props => {\r\n\r\n    const { date, city, sunrise, sunset, temp, pressure, wind, err } = props.weather;\r\n\r\n    let content = null;\r\n\r\n    if (!err && city) {\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n        content = (\r\n            <>\r\n                <h2 className=\"result__intro\">Wyniki wyszukiwania dla <span className=\"result__parameter\">{city} ({date}</span>)</h2>\r\n                <p className=\"result__details\">Temperatura: <span className=\"result__parameter\">{temp} &#176;C</span></p>\r\n                <p className=\"result__details\">Wschód słońca: <span className=\"result__parameter\">{sunriseTime}</span></p>\r\n                <p className=\"result__details\">Zachód słońca: <span className=\"result__parameter\">{sunsetTime}</span></p>\r\n                <p className=\"result__details\">Siła wiatru: <span className=\"result__parameter\">{wind} m/s</span></p>\r\n                <p className=\"result__details\">Ciśnienie: <span className=\"result__parameter\">{pressure} hPa</span></p>\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\n    return (\r\n        <section className=\"result\">\r\n            {err && city.length > 0 ? <h2 className=\"result__intro\">Nie mamy w bazie {city}</h2> : content}\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.scss';\n\n// Klucz do API\nconst APIKey = 'efa2ef11f117f7485b2fca8e87a3a2f5';\n\nclass App extends Component {\n\n  state = {\n    value: '',\n    date: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    err: false,\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n    if (prevState.value !== this.state.value) {\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response\n          }\n          throw Error(\"Nie udało się pobrać danych\")\n        })\n        .then(response => response.json())\n        .then(data => {\n          const time = new Date().toLocaleString()\n          this.setState(state => ({\n            err: false,\n            date: time,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            city: state.value,\n          }))\n        })\n        .catch(err => {\n          this.setState(prevState => ({\n            err: true,\n            city: prevState.value\n          }))\n        })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n        />\n        <h1 className=\"headline\">Aplikacja pogodowa</h1>\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}